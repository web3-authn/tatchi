#!/usr/bin/env node
// Generates pre-highlighted HTML for the homepage snippets using Shiki (Node).
// Writes to src/generated/home-snippets-html.ts
// Run: node ./scripts/generate-home-snippets.mjs

import { fileURLToPath } from 'node:url'
import { dirname, resolve } from 'node:path'
import { readFile, writeFile, mkdir } from 'node:fs/promises'

async function ensureDir(dir) {
  try { await mkdir(dir, { recursive: true }) } catch {}
}

async function main() {
  const __filename = fileURLToPath(import.meta.url)
  const __dirname = dirname(__filename)
  const root = resolve(__dirname, '..')

  const reactPath = resolve(root, 'src/snippets/react.tsx.txt')
  const corePath = resolve(root, 'src/snippets/core.ts.txt')
  const installPath = resolve(root, 'src/snippets/install.sh.txt')
  const outDir = resolve(root, 'src/generated')
  const outPath = resolve(outDir, 'home-snippets-html.ts')

  const [reactSnippet, coreSnippet, installSnippet] = await Promise.all([
    readFile(reactPath, 'utf8'),
    readFile(corePath, 'utf8'),
    readFile(installPath, 'utf8'),
  ])

  // Lazy import shiki only when generating
  const { createHighlighter } = await import('shiki')
  const highlighter = await createHighlighter({
    themes: ['github-dark-default', 'github-light-default'],
    langs: ['ts', 'tsx', 'bash'],
  })

  // Emphasize specific tokens with our own CSS classes so site theme can control colors.
  // We only wrap the base package segment (not the "/react" or "/core" suffixes).
  const emphasizePkg = (html) => html.replaceAll(
    '@tatchi-xyz/sdk',
    '<span class="code-kw-pkg">@tatchi-xyz/sdk</span>'
  )
  // Tint common package manager commands
  const emphasizePm = (html) => html
    .replaceAll(' npm ', ' <span class="code-kw-pm">npm</span> ')
    .replaceAll(' pnpm ', ' <span class="code-kw-pm">pnpm</span> ')
    .replaceAll(' bun ', ' <span class="code-kw-pm">bun</span> ')

  const reactHtmlLight = emphasizePkg(
    highlighter.codeToHtml(reactSnippet, { lang: 'tsx', theme: 'github-light-default' }),
  )
  const reactHtmlDark  = emphasizePkg(
    highlighter.codeToHtml(reactSnippet, { lang: 'tsx', theme: 'github-dark-default' }),
  )
  const coreHtmlLight  = emphasizePkg(
    highlighter.codeToHtml(coreSnippet,   { lang: 'ts',  theme: 'github-light-default' }),
  )
  const coreHtmlDark   = emphasizePkg(
    highlighter.codeToHtml(coreSnippet,   { lang: 'ts',  theme: 'github-dark-default' }),
  )
  const installHtmlLight = emphasizePm(
    emphasizePkg(
      highlighter.codeToHtml(installSnippet, { lang: 'bash', theme: 'github-light-default' }),
    )
  )
  const installHtmlDark  = emphasizePm(
    emphasizePkg(
      highlighter.codeToHtml(installSnippet, { lang: 'bash', theme: 'github-dark-default' }),
    )
  )

  const header = `/**\n * AUTO-GENERATED by scripts/generate-home-snippets.mjs\n * Do not edit by hand. Run: pnpm --filter examples/tatchi-docs gen:home-snippets\n */\n\n`
  const body = [
    `export const reactHtmlLight = ${JSON.stringify(reactHtmlLight)} as const;`,
    `export const reactHtmlDark = ${JSON.stringify(reactHtmlDark)} as const;`,
    `export const coreHtmlLight = ${JSON.stringify(coreHtmlLight)} as const;`,
    `export const coreHtmlDark = ${JSON.stringify(coreHtmlDark)} as const;`,
    `export const installHtmlLight = ${JSON.stringify(installHtmlLight)} as const;`,
    `export const installHtmlDark = ${JSON.stringify(installHtmlDark)} as const;`,
    '',
  ].join('\n')

  await ensureDir(outDir)
  await writeFile(outPath, header + body, 'utf8')
  console.log(`[shiki] Wrote generated snippets -> ${outPath}`)
}

main().catch((err) => {
  console.error('[shiki] Failed to generate homepage snippets:', err)
  process.exitCode = 1
})
