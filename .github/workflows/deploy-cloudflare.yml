name: deploy-cloudflare

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment (must match GitHub Environment name with secrets)"
        required: false
        default: "production"
  push:
    branches: [ main ]

jobs:
  build-sdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install deps (workspace)
        run: pnpm install --no-frozen-lockfile

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

      - name: Setup Bun (for worker bundling step in build.sh)
        uses: oven-sh/setup-bun@v2

      - name: Build SDK (sdk)
        run: pnpm -C sdk build

  publish-sdk-r2:
    runs-on: ubuntu-latest
    needs: build-sdk
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
    permissions:
      contents: read
      id-token: write   # for cosign keyless signing
    env:
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install deps (workspace)
        run: pnpm install --no-frozen-lockfile

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Build SDK (sdk)
        run: pnpm -C sdk build

      - name: Validate R2 secrets are present
        run: |
          set -eu
          test -n "${R2_ENDPOINT:-}" || (echo "R2_ENDPOINT is not set" >&2; exit 1)
          test -n "${R2_BUCKET:-}" || (echo "R2_BUCKET is not set" >&2; exit 1)
          test -n "${AWS_ACCESS_KEY_ID:-}" || (echo "R2_ACCESS_KEY_ID is not set" >&2; exit 1)
          test -n "${AWS_SECRET_ACCESS_KEY:-}" || (echo "R2_SECRET_ACCESS_KEY is not set" >&2; exit 1)

      - name: Generate sha256 manifest (sorted)
        run: |
          cd sdk/dist
          find . -type f \
            ! -name 'manifest.json' \
            ! -name 'manifest.sig' \
            -exec sha256sum {} + | sort > manifest.sha256

      - name: Convert manifest to JSON
        run: |
          cd sdk/dist
          python - <<'PY'
          import json, pathlib
          entries = []
          for line in pathlib.Path('manifest.sha256').read_text().splitlines():
            parts = line.split(maxsplit=1)
            if len(parts) != 2: continue
            digest, path = parts
            entries.append({"path": path, "sha256": digest})
          pathlib.Path('manifest.json').write_text(json.dumps({"files": entries}, indent=2))
          PY

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Sign manifest with cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: 'true'
        run: |
          cd sdk/dist
          cosign sign-blob --yes --output-signature manifest.sig manifest.json

      - name: Install AWS CLI (via pip)
        run: |
          python3 -m pip install --user awscli
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Publish to Cloudflare R2 (by commit SHA)
        env:
          PREFIX: releases/${{ github.sha }}
        run: |
          set -euxo pipefail
          test -n "$R2_ENDPOINT" && test -n "$R2_BUCKET"
          aws s3 sync sdk/dist s3://$R2_BUCKET/$PREFIX \
            --endpoint-url "$R2_ENDPOINT" --delete
          # Ensure correct MIME for wasm files
          for f in $(find sdk/dist -name "*.wasm" -type f); do
            key=${f#sdk/dist/}
            aws s3 cp "$f" s3://$R2_BUCKET/$PREFIX/"$key" \
              --endpoint-url "$R2_ENDPOINT" \
              --content-type application/wasm \
              --metadata-directive REPLACE
          done

      - name: Optionally publish under tag name when releasing
        if: startsWith(github.ref, 'refs/tags/')
        env:
          PREFIX: releases/${{ github.ref_name }}
        run: |
          set -euxo pipefail
          test -n "$R2_ENDPOINT" && test -n "$R2_BUCKET"
          aws s3 sync sdk/dist s3://$R2_BUCKET/$PREFIX \
            --endpoint-url "$R2_ENDPOINT" --delete
          for f in $(find sdk/dist -name "*.wasm" -type f); do
            key=${f#sdk/dist/}
            aws s3 cp "$f" s3://$R2_BUCKET/$PREFIX/"$key" \
              --endpoint-url "$R2_ENDPOINT" \
              --content-type application/wasm \
              --metadata-directive REPLACE
          done

  deploy-worker:
    runs-on: ubuntu-latest
    needs: build-sdk
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

      - name: Setup Bun (for worker bundling step in build.sh)
        uses: oven-sh/setup-bun@v2

      - name: Install deps (workspace)
        run: pnpm install --no-frozen-lockfile

      - name: Build SDK (sdk) for Worker bundling
        run: pnpm -C sdk build

      - name: Deploy Cloudflare Worker (relay)
        run: |
          pnpm -C examples/relay-cloudflare-worker run deploy

  deploy-pages:
    runs-on: ubuntu-latest
    needs: [build-sdk, publish-sdk-r2]
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CF_PAGES_PROJECT_VITE: ${{ secrets.CF_PAGES_PROJECT_VITE }}
      # Vite build-time envs used by the examples
      VITE_RELAYER_URL: ${{ vars.VITE_RELAYER_URL }}
      VITE_RELAYER_ACCOUNT_ID: ${{ vars.VITE_RELAYER_ACCOUNT_ID }}
      VITE_WEBAUTHN_CONTRACT_ID: ${{ vars.VITE_WEBAUTHN_CONTRACT_ID }}
      VITE_NEAR_NETWORK: ${{ vars.VITE_NEAR_NETWORK }}
      VITE_NEAR_RPC_URL: ${{ vars.VITE_NEAR_RPC_URL }}
      VITE_NEAR_EXPLORER: ${{ vars.VITE_NEAR_EXPLORER }}
      VITE_WALLET_ORIGIN: ${{ vars.VITE_WALLET_ORIGIN }}
      VITE_WALLET_SERVICE_PATH: ${{ vars.VITE_WALLET_SERVICE_PATH }}
      VITE_RP_ID_BASE: ${{ vars.VITE_RP_ID_BASE }}
      VITE_SDK_BASE_PATH: ${{ vars.VITE_SDK_BASE_PATH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

      - name: Setup Bun (for worker bundling step in build.sh)
        uses: oven-sh/setup-bun@v2

      - name: Install deps (workspace)
        run: pnpm install --no-frozen-lockfile

      - name: Build SDK (sdk) for Vite builds
        run: pnpm -C sdk build

      - name: Debug - print VITE_* env seen by build
        run: |
          echo "VITE_WALLET_ORIGIN=${VITE_WALLET_ORIGIN}"
          echo "VITE_WALLET_SERVICE_PATH=${VITE_WALLET_SERVICE_PATH}"
          echo "VITE_RP_ID_BASE=${VITE_RP_ID_BASE}"
          echo "VITE_RELAYER_URL=${VITE_RELAYER_URL}"
          echo "VITE_RELAYER_ACCOUNT_ID=${VITE_RELAYER_ACCOUNT_ID}"
          echo "VITE_NEAR_NETWORK=${VITE_NEAR_NETWORK}"
          echo "VITE_NEAR_RPC_URL=${VITE_NEAR_RPC_URL}"
          echo "VITE_NEAR_EXPLORER=${VITE_NEAR_EXPLORER}"
          echo "VITE_SDK_BASE_PATH=${VITE_SDK_BASE_PATH}"

      - name: Write Vite env files for production build
        run: |
          set -eu
          cat <<EOF > examples/vite/.env.production
VITE_RELAYER_URL=${VITE_RELAYER_URL}
VITE_RELAYER_ACCOUNT_ID=${VITE_RELAYER_ACCOUNT_ID}
VITE_WALLET_ORIGIN=${VITE_WALLET_ORIGIN}
VITE_WALLET_SERVICE_PATH=${VITE_WALLET_SERVICE_PATH}
VITE_RP_ID_BASE=${VITE_RP_ID_BASE}
VITE_SDK_BASE_PATH=${VITE_SDK_BASE_PATH}
VITE_NEAR_NETWORK=${VITE_NEAR_NETWORK}
VITE_NEAR_RPC_URL=${VITE_NEAR_RPC_URL}
VITE_NEAR_EXPLORER=${VITE_NEAR_EXPLORER}
VITE_WEBAUTHN_CONTRACT_ID=${VITE_WEBAUTHN_CONTRACT_ID}
EOF

          cat <<EOF > examples/tatchi-docs/.env.production
VITE_RELAYER_URL=${VITE_RELAYER_URL}
VITE_RELAYER_ACCOUNT_ID=${VITE_RELAYER_ACCOUNT_ID}
VITE_WALLET_ORIGIN=${VITE_WALLET_ORIGIN}
VITE_WALLET_SERVICE_PATH=${VITE_WALLET_SERVICE_PATH}
VITE_RP_ID_BASE=${VITE_RP_ID_BASE}
VITE_SDK_BASE_PATH=${VITE_SDK_BASE_PATH}
VITE_NEAR_NETWORK=${VITE_NEAR_NETWORK}
VITE_NEAR_RPC_URL=${VITE_NEAR_RPC_URL}
VITE_NEAR_EXPLORER=${VITE_NEAR_EXPLORER}
VITE_WEBAUTHN_CONTRACT_ID=${VITE_WEBAUTHN_CONTRACT_ID}
EOF

      - name: Build example site (tatchi-docs app)
        run: |
          pnpm -C examples/tatchi-docs build

      - name: Build VitePress docs under /docs
        run: |
          pnpm docs:build

      - name: Debug – print built _headers (tatchi-docs)
        run: |
          echo "--- examples/tatchi-docs/dist/_headers (if present) ---"
          if [ -f examples/tatchi-docs/dist/_headers ]; then
            cat examples/tatchi-docs/dist/_headers
          else
            echo "(no _headers emitted)"
          fi

      - name: Copy SDK runtime assets into tatchi-docs dist
        run: |
          # Serve SDK bundles under /sdk for uniform layout
          mkdir -p examples/tatchi-docs/dist/sdk examples/tatchi-docs/dist/sdk/workers
          cp -R sdk/dist/esm/sdk/* examples/tatchi-docs/dist/sdk/ || true
          cp -R sdk/dist/workers/* examples/tatchi-docs/dist/sdk/workers/ || true

      - name: Install Wrangler
        run: pnpm add -g wrangler@4

      - name: Debug - grep built dist for wallet origin (tatchi-docs)
        run: |
          echo "Occurrences of wallet origin in built files (if any):"
          rg -n "wallet\\.tatchi\\.xyz|wallet\\.example\\.localhost" examples/tatchi-docs/dist || true
          if rg -n "wallet\\.example\\.localhost" examples/tatchi-docs/dist; then
            echo "ERROR: Built assets still reference wallet.example.localhost" >&2
            exit 1
          fi

      - name: Deploy tatchi-docs to Cloudflare Pages (primary site)
        run: |
          wrangler pages deploy examples/tatchi-docs/dist --project-name "$CF_PAGES_PROJECT_VITE"

  deploy-wallet:
    runs-on: ubuntu-latest
    needs: build-sdk
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CF_PAGES_PROJECT_WALLET: ${{ secrets.CF_PAGES_PROJECT_WALLET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

      - name: Setup Bun (for worker bundling step in build.sh)
        uses: oven-sh/setup-bun@v2

      - name: Install deps (workspace)
        run: pnpm install --no-frozen-lockfile

      - name: Build SDK (sdk)
        run: pnpm -C sdk build

      - name: Generate wallet-only static site (wallet-dist)
        run: |
          set -euxo pipefail
          # Create minimal wallet service page
          mkdir -p wallet-dist/wallet-service wallet-dist/sdk
          cat > wallet-dist/wallet-service/index.html <<'HTML'
          <!doctype html>
          <html lang="en">
            <head>
              <meta charset="utf-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
              <title>Web3Authn Wallet Service</title>
              <script>window.global ||= window; window.process ||= { env: {} };</script>
            </head>
            <body>
              <script type="module" src="/sdk/wallet-iframe-host.js"></script>
            </body>
          </html>
          HTML

          # Add strict headers required for cross-origin embedding + WebAuthn
          cat > wallet-dist/_headers <<'HEADERS'
          /*
            Cross-Origin-Opener-Policy: same-origin
            Cross-Origin-Embedder-Policy: require-corp
            Cross-Origin-Resource-Policy: cross-origin
            Permissions-Policy: publickey-credentials-get=(self), publickey-credentials-create=(self)

          /wallet-service
            Cross-Origin-Opener-Policy: unsafe-none
          /wallet-service/
            Cross-Origin-Opener-Policy: unsafe-none
          HEADERS

          # Copy SDK assets (ESM bundles + workers) under /sdk
          mkdir -p wallet-dist/sdk wallet-dist/sdk/workers
          cp -R sdk/dist/esm/sdk/* wallet-dist/sdk/
          cp -R sdk/dist/workers wallet-dist/sdk/

      - name: Debug – print built _headers (wallet)
        run: |
          echo "--- wallet-dist/_headers ---"
          cat wallet-dist/_headers

      - name: Install Wrangler
        run: pnpm add -g wrangler@4

      - name: Deploy wallet static site to Cloudflare Pages
        run: |
          wrangler pages deploy wallet-dist --project-name "$CF_PAGES_PROJECT_WALLET"

  # publish-npm:
  #   name: Publish SDK to npm
  #   runs-on: ubuntu-latest
  #   # Only publish after all production deploy jobs succeed, and only on tag pushes
  #   needs: [deploy-worker, deploy-pages, deploy-wallet]
  #   if: startsWith(github.ref, 'refs/tags/')
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: 9

  #     - name: Setup Node (npm registry)
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'pnpm'
  #         registry-url: 'https://registry.npmjs.org'

  #     - name: Install Rust toolchain
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Add wasm target
  #       run: rustup target add wasm32-unknown-unknown

  #     - name: Install wasm-pack
  #       run: |
  #         curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

  #     - name: Setup Bun (for worker bundling step in build.sh)
  #       uses: oven-sh/setup-bun@v2

  #     - name: Install deps (workspace)
  #       run: pnpm install --no-frozen-lockfile

  #     - name: Build SDK (sdk)
  #       run: pnpm -C sdk build

  #     - name: Skip if version already published
  #       id: check_published
  #       working-directory: sdk
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #       run: |
  #         set -euo pipefail
  #         NAME=$(node -p "require('./package.json').name")
  #         VERSION=$(node -p "require('./package.json').version")
  #         echo "Checking if $NAME@$VERSION exists on npm..."
  #         if npm view "$NAME@$VERSION" version >/dev/null 2>&1; then
  #           echo "already=true" >> $GITHUB_OUTPUT
  #           echo "Version already published; skipping." >&2
  #         else
  #           echo "already=false" >> $GITHUB_OUTPUT
  #           echo "Not published yet; will publish." >&2
  #         fi

  #     - name: Publish @tatchi/* packages to npm
  #       if: steps.check_published.outputs.already == 'false'
  #       working-directory: sdk
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #       run: |
  #         npm publish --access public
